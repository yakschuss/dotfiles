#! /usr/bin/env bash

# Idempotent bootstrap script to stand up a new development Mac

# Abort this script if any command fails
set -e

# Set the computer name to
COMPUTER_NAME='jackschuss'
COMPUTER_NAME_HUMAN="jackschuss"

# Toggle to configure server or desktop
# STRAPPING_SERVER=true

# Some helper functions used throughout the script
silently() {
  $* >/dev/null 2>&1
}

ignore_error() {
  $* || echo -n
}

install_mas_app() {
  if [ ! -x "/Applications/$2.app" ]; then
    echo "-----> Installing $2 from Mac App Store: http://itunes.apple.com/app/$1"
    mas install $1
  else
    echo "-----> Ensuring $2 still installed from Mac App Store: http://itunes.apple.com/app/id$1"
  fi
}

install_cask_app() {
  echo "-----> Installing $1 from Caskroom"
  [[ -n $(brew_ls $1) ]] || brew install --cask $1
}

start_service() {
  silently ignore_error sudo launchctl load -w $1 2> >(grep -v "Operation already in progress")
}

brew_ls() {
  (cat /tmp/brew_ls 2> /dev/null || brew ls -1 | tee /tmp/brew_ls) | grep $1
}

brew_install() {
  echo -n "$1 "
  [[ -n $(brew_ls $1) ]] || brew install $1
}

if [ -n "$COMPUTER_NAME" ]; then
  echo "-----> Setting computer name to $COMPTUER_NAME"
  sudo scutil --set ComputerName $COMPUTER_NAME_HUMAN
  sudo scutil --set HostName $COMPUTER_NAME
  sudo scutil --set LocalHostName $COMPUTER_NAME
  sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string $COMPUTER_NAME
fi

echo "-----> Create ~/Code directory"
mkdir -p ~/Code

echo "-----> Enabling SSH (remote login)"
sudo systemsetup -getremotelogin | grep -q ": On" || sudo systemsetup -setremotelogin on

echo "-----> Enabling screen sharing (vnc)"
sudo defaults write /var/db/launchd.db/com.apple.launchd/overrides.plist com.apple.screensharing -dict Disabled -bool false
start_service /System/Library/LaunchDaemons/com.apple.screensharing.plist

if [ "$STRAPPING_SERVER" = true ] ; then
  echo "-----> Disabling screen saver and sleepiness"
  defaults -currentHost write com.apple.screensaver idleTime 0
  sudo pmset sleep 0
  sudo pmset disksleep 0
  sudo pmset autorestart 1
  sudo pmset repeat wakeorpoweron MTWRFSU 5:00:00

  echo "-----> Disabling IR receiver"
  sudo defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool false

  echo "-----> Disabling power button from sleeping system"
  defaults write com.apple.loginwindow PowerButtonSleepsSystem -bool no
fi

# echo "-----> Make keyboard faster"
# defaults write NSGlobalDomain KeyRepeat -int 1
# defaults write NSGlobalDomain InitialKeyRepeat -int 10

echo "-----> Enable full keyboard access for all controls (in Keyboard pref pane)"
defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

# Avoid creating .DS_Store files
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

if [ "$UPDATE_SYSTEM" = true ] ; then
  echo "-----> Updating system software"
  sudo softwareupdate --install --all 2> >(grep -v "No updates are available") 1> /dev/null
fi

if [ ! -x /opt/homebrew/bin/brew ]; then
  echo "-----> Installing homebrew"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# Install mas apps
echo -n "-----> Installing mas (install App Store apps from the command line): "
brew_install mas
echo

install_mas_app 1532419400 MeetingBar
install_cask_app docker
install_cask_app google-chrome

install_cask_app karabiner-elements
install_cask_app slack
install_cask_app spotify
install_cask_app zoom
install_cask_app discord

# Add apps to login items
# osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/Unshaky.app", hidden:false}'

#TODO: Turn off iTunes track notifications
#TODO: Configure Terminal.app via plist

echo -n "-----> Installing useful binaries: "


brew_install dockutil                     # Add/remove items from Dock
brew_install fzf                        # Fuzzy finder for zsh and vim
brew_install gh                         # GitHub CLI
brew_install git                        # Distributed version control
brew_install git-lfs                    # Large File Storage in git
brew_install gpg                        # Needed for installing node via asdf (and signing git commits)
# brew_install heroku/brew/heroku         # Recommened way to install heroku command line
# brew_install htop-osx                   # Better top
brew_install hub
brew_install imagemagick
brew_install jq                         # Sling JSON around how you want to
brew_install keybase
brew_install shared-mime-info           # Needed for the mimemagic Ruby gem
# brew_install moreutils                  # Includs ts (timestamp) binary
brew_install neovim                     # Newer, better, faster, stronger vim
# brew_install node                       # JS V8 engine
brew_install postgis                    # Realational Database
# brew_install pure                       # Clean prompt for zsh
brew_install reattach-to-user-namespace # Reattaches user namespace in tmux  (for pasteboard interaction)
brew_install redis                      # Key-value store
# brew_install rename                     # Like mv but better (takes regex)
# brew_install ruby-install               # Helper for chruby to install ruby versions
brew_install ripgrep                    # Ripgrep - faster than grep, ack, or ag
brew_install tmux                       # Terminal multiplexer (for saving project state and switching between projects)
# brew_install tree                       # ASCII view of directory/file structure
# brew_install watch                      # Repeateadly run a command (clearing output between runs)
brew_install zsh                        # Zsh 5
echo

# Start redis and postgres
brew services start redis
brew services start postgres

# echo "-----> Set default shell to /usr/local/bin/zsh"
# sudo chsh -s /usr/local/bin/zsh $USER

set +e # ignore errors below
echo "-----> Configuring Menubar and Dock"

# Add seconds to Menubar time
defaults write com.apple.menuextra.clock "DateFormat" -string "\"EEE d MMM h:mm:ss\""

# Don't show recent apps in Dock
defaults write com.apple.dock show-recents -bool FALSE

# # Put Dock on right
# defaults write com.apple.dock "orientation" -string "right"

# Set dock icon size
defaults write com.apple.dock "tilesize" -int "48"

# Add/remove apps to/from Dock
for app in 'Launchpad' 'Maps' 'Photos' 'FaceTime' 'Contacts' 'Notes' 'Mail' 'Reminders' 'TV' 'Podcasts' 'News' 'App Store' 'System Preferences'; do
  dockutil --remove "$app" > /dev/null
done
dockutil --add '/Applications/iTerm.app' --after 'Music' > /dev/null
dockutil --add '/Applications/Slack.app' --after 'Iterm.app' > /dev/null

# Cleanup
rm /tmp/brew_ls

# Goodbye
echo "-----> All done. Enjoy your shiny new $COMPUTER_NAME_HUMAN."
